---
name: "Create infra components: CI"
on:
  workflow_call:
  workflow_dispatch:

env:
  KV_NAME: pavel-lysianok31987750
  RG_NAME: eastusRgnew
  SQL_LOGIN: sqladmin
  SQL_DB_SERVER_NAME: cloudxsqlserverlysianok26
  SQL_DB_NAME: cloudxdatabase26
jobs:
  install-dependencies:
    runs-on: [ubuntu-latest]
    steps:

      - name: "Set up required dependencies"
        run: |
          echo "Install dependencies"
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          sudo apt-get update && sudo apt-get install --only-upgrade -y azure-cli
          sudo apt-get install git
          python3 --version

  create_infrastructure:
    runs-on: [ubuntu-latest]
    needs: [install-dependencies]

    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: shell
          filters: |
            yaml:
              - added|modified: '**.yaml'
              - added|modified: '**.yml'
              - added|modified: '*.yamllint'

      - name: Azure login
        run: |
          az login --service-principal -u 225ebedd-871a-43cb-b87e-1191e38b257c -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}



      - name: Create resource group
        run: |
          az group create --name "${{ env.RG_NAME }}" --location eastus

      - name: Create Traffic Manager profile
        run: |
          trafficManagerProfile='trafficmMnagerProfile'$RANDOM
          echo "TRFPROFILE=$(echo $trafficManagerProfile)" >> $GITHUB_ENV
          az network traffic-manager profile create \
            --name $trafficManagerProfile \
            --resource-group "${{ env.RG_NAME }}" \
            --routing-method Priority \
            --path '/' \
            --protocol "HTTP" \
            --unique-dns-name $trafficManagerProfile  \
            --ttl 30 \
            --port 80

      - name: KeyVault creation
        run: |
          az keyvault create --name "${{ env.KV_NAME }}" --resource-group "${{ env.RG_NAME }}" --location "EastUS"

      - name: SQL password KV set
        run: |
          az keyvault secret set --vault-name "${{ env.KV_NAME }}" --name "pavelLysianokSql" --value ${{ secrets.SQLPassword}}

      - name: Create SQL server
        run: |
          az sql server create --name "${{ env.SQL_DB_SERVER_NAME }}" --resource-group "${{ env.RG_NAME }}" \
          --location "eastus" \
          --admin-user "${{ env.SQL_LOGIN }}" \
          --admin-password "${{ secrets.SQLPassword}}"

      - name: Create SQL database
        run: |
          echo "Creating $database SQL Database"
          az sql db create --server "${{ env.SQL_DB_SERVER_NAME }}" \
          --resource-group "${{ env.RG_NAME }}" \
          --name "${{ env.SQL_DB_NAME }}" \
          --service-objective S0
          echo "Get SQL DB connection string"
          connstring=$(az sql db show-connection-string --name "${{ env.SQL_DB_NAME }}" --server "${{ env.SQL_DB_SERVER_NAME }}" --client ado.net --output tsv)
          echo "Set SQL DB connection string to KV"
          az keyvault secret set --name "connstring" --value "$connstring" --vault-name "${{ env.KV_NAME }}"

      - name: Confidure Firewall rules
        run: |
          export startIp="0.0.0.0"
          export endIp="0.0.0.0"
          echo "Creating firewall rule with starting ip of $startIp" and ending ip of $endIp
          az sql server firewall-rule create --server "${{ env.SQL_DB_SERVER_NAME }}" \
          --resource-group "${{ env.RG_NAME }}" \
          --name AllowYourIp \
          --start-ip-address $startIp \
          --end-ip-address $endIp

      - name: Create App Service Plan EastUS
        run: |
          az appservice plan create \
            --name appServicePlanEastUS \
            --resource-group "${{ env.RG_NAME }}" \
            --location eastus \
            --sku B1 \
            --is-linux

      - name: Create App Service Plan CentralUS
        run: |
          az appservice plan create \
          --name appServicePlanCentralUS \
          --resource-group "${{ env.RG_NAME }}" \
          --location centralus \
          --sku B1 \
          --is-linux

      - name: Create Web App in App service Plan EastUS
        run: |
          sub=$(az account show | jq '.id')
          sub=$(echo $sub | tr -d '"')
          az account set --subscription $sub
          az webapp create --name webApp-plysianok-eastus \
          --plan appServicePlanEastUS \
          --resource-group "${{ env.RG_NAME }}" \
          --runtime "PYTHON:3.9"
          echo "Confuguring WebApp"
          connstreastus="@Microsoft.KeyVault(SecretUri=https://${{ env.KV_NAME}}.vault.azure.net/secrets/connstring)"
          az webapp config appsettings set --name webApp-plysianok-eastus --resource-group "${{ env.RG_NAME }}" \
          --settings "SQL_CONNSTR=$connstreastus"
          echo "Create connection between KV and WebApp"
          az webapp connection create keyvault -g "${{ env.RG_NAME }}" -n webApp-plysianok-eastus --tg "${{ env.RG_NAME }}" --vault "${{ env.KV_NAME }}" --system-identity
          echo "Clone Application"
          git clone https://github.com/pavellysianok/msdocs-python-flask-webapp-quickstart
          cd msdocs-python-flask-webapp-quickstart
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          echo "Start the WebApp"
          az webapp up --plan appServicePlanEastUS \
          --resource-group "${{ env.RG_NAME }}" \
          --runtime "PYTHON:3.9" \
          --name webApp-plysianok-eastus \
        continue-on-error: true

      - name: Create Web App in App service Plans CentralUS
        run: |
          sub=$(az account show | jq '.id')
          sub=$(echo $sub | tr -d '"')
          az account set --subscription $sub
          az webapp create --name webApp-plysianok-centralus \
          --plan appServicePlanCentralUS \
          --resource-group "${{ env.RG_NAME }}" \
          --runtime "PYTHON:3.9"
          echo "Confuguring WebApp"
          connstrcentral="@Microsoft.KeyVault(SecretUri=https://${{ env.KV_NAME}}.vault.azure.net/secrets/connstring)"
          az webapp config appsettings set --name webApp-plysianok-centralus --resource-group "${{ env.RG_NAME }}" \
          --settings "SQL_CONNSTR=$connstrcentral"
          echo "Create connection between KV and WebApp"
          az webapp connection create keyvault -g "${{ env.RG_NAME }}" -n webApp-plysianok-centralus --tg "${{ env.RG_NAME }}" --vault "${{ env.KV_NAME }}" --system-identity
          echo "Clone Application"
          mkdir app2
          cd app2
          git clone https://github.com/pavellysianok/msdocs-python-flask-webapp-quickstart
          cd msdocs-python-flask-webapp-quickstart
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          echo "Start the WebApp"
          az webapp up --plan appServicePlanCentralUS \
          --resource-group "${{ env.RG_NAME }}" \
          --runtime "PYTHON:3.9" \
          --name webApp-plysianok-centralus
        continue-on-error: true


      - name: Create Traffic Manager endpoint CentralUS
        run: |
          app2ResourceId=$(az webapp show --name webApp-plysianok-eastus \
          --resource-group "${{ env.RG_NAME }}" --query id --output tsv)

          az network traffic-manager endpoint create \
              --name endpoint-plysianok-eastus \
              --resource-group "${{ env.RG_NAME }}" \
              --profile-name ${{ env.TRFPROFILE }} \
              --type azureEndpoints \
              --target-resource-id $app2ResourceId \
              --priority 2 \
              --endpoint-status Enabled

      - name: Create Traffic Manager endpoint EastUS
        run: |
          app1ResourceId=$(az webapp show --name webApp-plysianok-centralus \
          --resource-group "${{ env.RG_NAME }}" --query id --output tsv)
          az network traffic-manager endpoint create \
          --name endpoint-plysianok-centralus \
          --resource-group "${{ env.RG_NAME }}" \
          --profile-name ${{ env.TRFPROFILE }} \
          --type azureEndpoints \
          --target-resource-id $app1ResourceId \
          --priority 1 \
          --endpoint-status Enabled
